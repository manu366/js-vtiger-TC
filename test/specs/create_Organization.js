describe("organization",async()=>{
    it("create organization",async()=>{
        await browser.url('http://localhost:8888/')
        await browser.maximizeWindow()
        await expect(browser).toHaveUrlContaining("http://localhost:8888/")
        const username=await browser.$("//input[@name='user_name']")
        await username.waitForDisplayed()
        await username.setValue("admin")
        const password=await browser.$("//input[@name='user_password']")
        await password.waitForDisplayed()
        await password.setValue("admin")
        const loginBTN=await browser.$("//input[@id='submitButton']")
        await loginBTN.waitForDisplayed()
        await loginBTN.click()

        const organization=await browser.$("//a[.='Organizations']")
        await organization.waitForDisplayed()
        await organization.click()
        await expect(browser).toHaveUrlContaining("index")
        
        const createorganization=await browser.$("//img[@title='Create Organization...']")
        await createorganization.waitForDisplayed()
        await createorganization.click()
        await expect(browser).toHaveUrlContaining("Accounts&action")
        
    
        const accountname=await browser.$("//input[@name='accountname']")
        await accountname.waitForDisplayed()
        await accountname.setValue("TYSS"+Math.random)
        const industry=await browser.$("//select[@name='industry']")
        await industry.waitForDisplayed()
        await industry.selectByIndex(2)
        const accounttype=await browser.$("//select[@name='accounttype']")
        await accounttype.waitForDisplayed()
        await accounttype.selectByVisibleText("Analyst")
        const saveBTN=await browser.$("//input[@title='Save [Alt+S]']")
        await saveBTN.waitForDisplayed()
        await saveBTN.click()
        await expect(browser).toHaveUrlContaining("EditView&return_action")

        const administretor=await browser.$("//img[@src='themes/softed/images/user.PNG']")
        await administretor.waitForDisplayed()
        await administretor.moveTo()
        await expect(browser).toHaveUrlContaining("Accounts&")
        const singout=await browser.$("//a[.='Sign Out']")
        await singout.waitForDisplayed()
        await singout.click()
    })
})